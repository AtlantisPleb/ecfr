// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Agency {
  id              String            @id @default(cuid())
  name            String
  short_name      String?
  display_name    String
  sortable_name   String
  slug            String            @unique
  parent_id       String?
  parent          Agency?           @relation("AgencyHierarchy", fields: [parent_id], references: [id])
  children        Agency[]          @relation("AgencyHierarchy")
  titles          Title[]           @relation("AgencyTitles")
  wordCounts      WordCount[]
  activityMetrics ActivityMetrics[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Title {
  id          String      @id @default(cuid())
  number      Int
  name        String
  type        String      // e.g., "CFR"
  chapter     Int?
  part        Int?
  subpart     String?
  section     String?
  url         String?
  agencies    Agency[]    @relation("AgencyTitles")
  chapters    Chapter[]
  versions    Version[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([number])
}

model Chapter {
  id          String    @id @default(cuid())
  number      Int
  name        String
  titleId     String
  title       Title     @relation(fields: [titleId], references: [id])
  parts       Part[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Part {
  id          String    @id @default(cuid())
  number      Int
  name        String
  chapterId   String
  chapter     Chapter   @relation(fields: [chapterId], references: [id])
  subparts    Subpart[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Subpart {
  id          String    @id @default(cuid())
  name        String
  partId      String
  part        Part      @relation(fields: [partId], references: [id])
  sections    Section[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Section {
  id          String    @id @default(cuid())
  number      String
  name        String
  content     String    @db.Text
  subpartId   String
  subpart     Subpart   @relation(fields: [subpartId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Store all version metadata in main Version table
model Version {
  id              String        @id @default(cuid())
  titleId         String
  title           Title         @relation(fields: [titleId], references: [id])
  content         String        @db.Text
  wordCount       Int
  
  // Core version dates
  amendment_date  DateTime      // When changes take effect
  effective_date  DateTime?     // Official effective date if different
  published_date  DateTime?     // When published in Federal Register
  
  // Version metadata
  authority       String?       @db.Text  // Legal authority for changes
  source          String?       // Source of changes (e.g., "Federal Register")
  
  // Related data
  changes         Change[]      // Specific changes in this version
  citations       Citation[]    // Federal Register citations
  textMetrics     TextMetrics[]
  sourceRefs      Reference[]   @relation("SourceReferences")
  targetRefs      Reference[]   @relation("TargetReferences")
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Separate table for Federal Register citations to store full metadata
model Citation {
  id              String    @id @default(cuid())
  versionId       String
  version         Version   @relation(fields: [versionId], references: [id])
  
  // Citation details
  volume          Int       // Federal Register volume
  page            Int       // Starting page number
  date            DateTime  // Publication date
  type            String    // e.g., "Rule", "Proposed Rule", "Notice"
  url             String?   // Link to Federal Register document
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([volume, page])
}

model Change {
  id              String    @id @default(cuid())
  versionId       String
  version         Version   @relation(fields: [versionId], references: [id])
  
  // Change details
  type            String    // ADD, MODIFY, DELETE
  section         String    // affected section number/id
  description     String    // Description of changes
  
  // Additional metadata
  amendment_part  String?   // Specific part being amended
  effective_date  DateTime? // If different from version effective date
  url             String?   // Link to change documentation
  
  // Federal Register citation for this specific change
  fr_volume       Int?      // Federal Register volume
  fr_page         Int?      // Federal Register page
  fr_date         DateTime? // Federal Register publication date
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model WordCount {
  id          String      @id @default(cuid())
  agencyId    String
  agency      Agency      @relation(fields: [agencyId], references: [id])
  count       Int
  date        DateTime
  createdAt   DateTime    @default(now())
}

// Analysis metrics models

model TextMetrics {
  id              String    @id @default(cuid())
  versionId       String
  version         Version   @relation(fields: [versionId], references: [id])
  wordCount       Int       // Total words
  uniqueWords     Int       // Unique word count
  avgWordLength   Float     // Average word length
  avgSentenceLen  Float     // Average sentence length
  createdAt       DateTime  @default(now())
}

model Reference {
  id              String    @id @default(cuid())
  sourceId        String    // Version ID that contains reference
  source          Version   @relation("SourceReferences", fields: [sourceId], references: [id])
  targetId        String    // Version ID being referenced
  target          Version   @relation("TargetReferences", fields: [targetId], references: [id])
  context         String    // The actual text containing the reference
  type            String    // INTERNAL (same agency) or EXTERNAL (different agency)
  createdAt       DateTime  @default(now())
}

model ActivityMetrics {
  id              String    @id @default(cuid())
  agencyId        String
  agency          Agency    @relation(fields: [agencyId], references: [id])
  date            DateTime  // Usually month start
  newContent      Int      // Words added in new sections
  modifiedContent Int      // Words changed in existing sections
  deletedContent  Int      // Words removed
  totalWords      Int      // Total words at this point
  createdAt       DateTime  @default(now())
}