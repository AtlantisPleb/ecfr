// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Agency {
  id              String            @id @default(cuid())
  name            String
  short_name      String?
  display_name    String
  sortable_name   String
  slug            String            @unique
  parent_id       String?
  parent          Agency?           @relation("AgencyHierarchy", fields: [parent_id], references: [id])
  children        Agency[]          @relation("AgencyHierarchy")
  titles          Title[]
  wordCounts      WordCount[]
  activityMetrics ActivityMetrics[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Title {
  id          String      @id @default(cuid())
  number      Int
  name        String
  type        String      // e.g., "CFR"
  chapter     Int?
  part        Int?
  subpart     String?
  section     String?
  url         String?
  agency      Agency      @relation(fields: [agencyId], references: [id])
  agencyId    String
  chapters    Chapter[]
  versions    Version[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Chapter {
  id          String    @id @default(cuid())
  number      Int
  name        String
  titleId     String
  title       Title     @relation(fields: [titleId], references: [id])
  parts       Part[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Part {
  id          String    @id @default(cuid())
  number      Int
  name        String
  chapterId   String
  chapter     Chapter   @relation(fields: [chapterId], references: [id])
  subparts    Subpart[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Subpart {
  id          String    @id @default(cuid())
  name        String
  partId      String
  part        Part      @relation(fields: [partId], references: [id])
  sections    Section[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Section {
  id          String    @id @default(cuid())
  number      String
  name        String
  content     String    @db.Text
  subpartId   String
  subpart     Subpart   @relation(fields: [subpartId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Version {
  id           String        @id @default(cuid())
  titleId      String
  title        Title         @relation(fields: [titleId], references: [id])
  content      String        @db.Text
  wordCount    Int
  date         DateTime
  changes      Change[]
  textMetrics  TextMetrics[]
  sourceRefs   Reference[]   @relation("SourceReferences")
  targetRefs   Reference[]   @relation("TargetReferences")
  createdAt    DateTime      @default(now())
}

model Change {
  id          String      @id @default(cuid())
  versionId   String
  version     Version     @relation(fields: [versionId], references: [id])
  type        String      // ADD, MODIFY, DELETE
  section     String      // affected section
  description String
  createdAt   DateTime    @default(now())
}

model WordCount {
  id          String      @id @default(cuid())
  agencyId    String
  agency      Agency      @relation(fields: [agencyId], references: [id])
  count       Int
  date        DateTime
  createdAt   DateTime    @default(now())
}

// Analysis metrics models

model TextMetrics {
  id              String    @id @default(cuid())
  versionId       String
  version         Version   @relation(fields: [versionId], references: [id])
  wordCount       Int       // Total words
  uniqueWords     Int       // Unique word count
  avgWordLength   Float     // Average word length
  avgSentenceLen  Float     // Average sentence length
  createdAt       DateTime  @default(now())
}

model Reference {
  id              String    @id @default(cuid())
  sourceId        String    // Version ID that contains reference
  source          Version   @relation("SourceReferences", fields: [sourceId], references: [id])
  targetId        String    // Version ID being referenced
  target          Version   @relation("TargetReferences", fields: [targetId], references: [id])
  context         String    // The actual text containing the reference
  type            String    // INTERNAL (same agency) or EXTERNAL (different agency)
  createdAt       DateTime  @default(now())
}

model ActivityMetrics {
  id              String    @id @default(cuid())
  agencyId        String
  agency          Agency    @relation(fields: [agencyId], references: [id])
  date            DateTime  // Usually month start
  newContent      Int      // Words added in new sections
  modifiedContent Int      // Words changed in existing sections
  deletedContent  Int      // Words removed
  totalWords      Int      // Total words at this point
  createdAt       DateTime  @default(now())
}